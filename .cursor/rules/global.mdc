---
description: 项目基础架构和开发规范
globs: 
alwaysApply: true
---

# 项目基础架构

## 技术栈

### 核心框架
- **Next.js 15.2.4** - React 全栈框架
- **React 19.0.0** - 前端UI库
- **TypeScript 5** - 类型安全
- **Tailwind CSS 4.0.17** - 样式框架

### 主要依赖
- **@heroicons/react** - 图标库
- **@radix-ui/react-*** - 无障碍UI组件
- **react-hook-form** - 表单处理
- **react-big-calendar** - 日历组件
- **date-fns** - 日期处理
- **moment** - 日期时间库
- **xlsx** - Excel文件处理

## 样式系统

### 全局样式
- **文件位置**: `src/app/globals.css`
- **CSS变量**: 定义主题色彩
  ```css
  :root {
    --header-bg: #3b7bc0;
    --header-text: #fff;
    --sidebar-bg: linear-gradient(180deg, #4a90e2, #357abd);
    --sidebar-text: #fff;
  }
  ```

### 样式规范
- **主要样式**: 原生HTML + Tailwind CSS
- **避免使用**: 重型UI库（如Ant Design）
- **模态框遮罩**: `bg-black/50`
- **响应式**: 所有页面必须兼容手机端

### Tailwind配置
- **文件**: `tailwind.config.js`
- **模式**: AOT模式
- **插件**: tailwind-scrollbar
- **目标浏览器**: iOS >= 16, Android >= 7

## API接口系统

### 接口文件结构
- **聚合出口**: `src/services/auth.ts`（仅 re-export 模块和公共方法）
- **模块目录**: `src/services/modules/`（按业务域拆分 API，如 `users.ts`、`staff.ts`）
- **通用工具**: `src/services/apiClient.ts`（`request`, `getAuthHeader`, `buildQueryString` 等）
- **响应类型**: `src/services/types.ts`
- **环境配置**: `src/config/env.ts`

### 新增API接口规范

#### 1. 接口定义
- 根据业务选择或新增模块文件（例如 `src/services/modules/users.ts`）
- 在模块顶部声明专用的 `interface`/`type`，共用类型放在 `src/services/types.ts`

#### 2. 接口实现
- 使用 `request`/`normalizeApiResponse` 优先封装常见模式，必要时可直接 `fetch`
- 统一从 `apiClient.ts` 获取 `getAuthHeader`、`buildQueryString`
- 保持函数签名与原 `auth_raw.ts` 中版本兼容，避免破坏现有调用方

```typescript
import { request, normalizeApiResponse } from '../apiClient';
import type { ApiResponse } from '../types';

export const newApiFunction = async (params: NewApiParams): Promise<ApiResponse> => {
  try {
    const { data } = await request('/api/new-endpoint', {
      method: 'POST',
      body: params,
    });
    return normalizeApiResponse(data);
  } catch (error) {
    console.error('新功能API调用失败:', error);
    return { code: 500, message: error instanceof Error ? error.message : '新功能API调用失败' };
  }
};
```

#### 3. 接口使用
- 页面或组件通过 `@/services/auth` 聚合出口引入对应函数
- 类型导入时使用 `import type { ApiResponse } from '@/services/auth'`

### API统一规范
- **认证**: 默认 `request` 会合并 `getAuthHeader()`，手动 `fetch` 时需显式设置
- **错误处理**: 统一的try-catch结构
- **响应格式**: 统一的 `ApiResponse`/`ApiEnvelope`
- **日志**: 开发环境自动打印请求/响应

## 项目结构

### 目录组织
```
src/
├── app/                    # Next.js App Router页面
├── components/             # 可复用组件
├── contexts/              # React Context
├── services/              # API接口服务
├── types/                 # TypeScript类型定义
├── utils/                 # 工具函数
└── config/                # 配置文件
```

### 路由系统
- **框架**: Next.js App Router
- **页面文件**: `app/页面名/page.tsx`
- **布局文件**: `app/layout.tsx`
- **API代理**: 开发环境代理到 `https://www.huayaopudong.com/api/`

## 开发规范

### 页面开发
1. **权限检查**: 使用 `useAuth().hasPermission()`
2. **样式**: 优先使用Tailwind CSS类
3. **响应式**: 使用 `md:` 等断点前缀
4. **类型安全**: 所有组件使用TypeScript

### 组件开发
- **位置**: `src/components/` 或页面内 `components/` 文件夹
- **命名**: PascalCase
- **导出**: 默认导出或命名导出
- **Props**: 使用TypeScript接口定义

### 状态管理
- **全局状态**: React Context (AuthContext)
- **本地状态**: useState, useReducer
- **表单状态**: react-hook-form
- **权限状态**: AuthContext统一管理

## 构建配置

### Next.js配置
- **开发模式**: 使用Turbopack (`--turbopack`)
- **生产模式**: 静态导出 (`output: 'export'`)
- **基础路径**: `/staff`
- **API重写**: 开发环境代理到远程API

### 浏览器支持
- **目标**: iOS >= 16, Android >= 7
- **覆盖率**: > 0.2%, not dead
- **现代浏览器**: 支持ES2017+

## 调试工具

### 开发环境
- **API调试器**: `ApiDebugger` 组件
- **权限调试器**: `PermissionDebugger` 组件  
- **菜单调试器**: `MenuDebugger` 组件
- **控制台日志**: 自动打印API请求/响应

### 生产环境
- **源码映射**: 启用 `productionBrowserSourceMaps`
- **错误处理**: 统一的错误边界和提示


如果需要前端导出下载Excel，请使用/src/components/ExcelExporter组件
